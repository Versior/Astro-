---
import { menuLinks, siteConfig, friends } from "@/site.config";
---
<footer
  class="mt-auto flex w-full flex-col items-center justify-center gap-y-1 pb-4 pt-10 text-center align-top font-semibold text-gray-600 dark:text-gray-400"
>
  <div class="flex flex-col w-full gap-y-1">
    <div class="text-center text-[9px]">
      &copy; {siteConfig.author}
    </div>
    <!-- 运行时间（已正常，保留） -->
    <div class="uptime-section text-center text-[9px]">
      本站已运行: <span id="site-uptime">0秒</span>
    </div>
    <!-- 不蒜子统计容器：保留原ID，新增默认值避免空白 -->
    <div class="text-center text-[9px]">
      <span id="busuanzi_container_site_uv">
        访客数:<span id="busuanzi_value_site_uv">--</span>人次
      </span> | 
      <span id="busuanzi_container_site_pv">
        总访问量:<span id="busuanzi_value_site_pv">--</span>次
      </span>
    </div>
  </div>

  <nav
    aria-label="More on this site"
    class="flex gap-x-2 sm:gap-x-0 sm:divide-x sm:divide-gray-500 mt-1"
  >
    {
      friends.map((link) => (
        <a 
          key={link.url} 
          class="px-4 py-2 text-[9px] sm:py-0 sm:hover:text-textColor sm:hover:underline" 
          href={link.url} 
          target="_blank" 
          rel="noopener noreferrer"
        >
          {link.name}
        </a>
      ))
    }
  </nav>

  <!-- 1. 修复不蒜子脚本：改用备用CDN + 延迟加载，避免被拦截 -->
  <script is:inline>
    // 延迟1秒加载不蒜子，避开浏览器初始拦截
    setTimeout(() => {
      const script = document.createElement('script');
      // 用备用HTTPS CDN（主CDN失效时可用）
      script.src = 'https://cdn.jsdelivr.net/gh/ibruce/busuanzi@2.3/busuanzi.pure.mini.js';
      script.async = true;
      // 脚本加载成功/失败的反馈
      script.onload = () => console.log('不蒜子脚本加载成功');
      script.onerror = () => {
        console.error('不蒜子脚本加载失败，启用本地模拟统计');
        // 加载失败时，用本地存储临时填充数据
        const uv = localStorage.getItem('site_uv') || '1';
        const pv = localStorage.getItem('site_pv') || '1';
        document.getElementById('busuanzi_value_site_uv').textContent = uv;
        document.getElementById('busuanzi_value_site_pv').textContent = pv;
        // 记录总访问量（每次刷新+1）
        localStorage.setItem('site_pv', String(Number(pv) + 1));
      };
      document.body.appendChild(script);
    }, 1000);

    // 2. 运行时间脚本（已正常，保留）
    try {
      document.addEventListener('DOMContentLoaded', () => {
        const uptimeElement = document.getElementById('site-uptime');
        const startTime = new Date('2018-07-18T00:00:00Z');
        if (!uptimeElement) return;

        function formatTime(seconds) {
          const days = Math.floor(seconds / (24 * 60 * 60));
          seconds %= 24 * 60 * 60;
          const hours = Math.floor(seconds / (60 * 60));
          seconds %= 60 * 60;
          const minutes = Math.floor(seconds / 60);
          const secondsRemaining = seconds % 60;
          return `${days} 天 ${String(hours).padStart(2, '0')} 时 ${String(minutes).padStart(2, '0')} 分 ${String(secondsRemaining).padStart(2, '0')} 秒`;
        }

        function updateUptime() {
          const now = new Date();
          const seconds = Math.floor((now - startTime) / 1000);
          uptimeElement.textContent = formatTime(seconds);
        }

        updateUptime();
        setInterval(updateUptime, 1000);
      });
    } catch (error) {
      console.error('运行时间脚本报错：', error);
    }
  </script>
</footer>
